//---------------------------------------------------------------------------------------------------------------------------
// 이진트리 깊이 우선 탐색 (DFS: Depth First Search)

// 오른쪽 자식은 *2, 왼 자식은 *2 + 1.
// 전위순위 : 부모 -> 왼자식 -> 오른자식 혹은 부모 -> 왼서브트리 -> 오른서브트리
// 중위순회 : 왼자식-> 부모-> 오른자식 혹은 왼서브트리-> 부모-> 오른서브트리
// 후위순회 : 왼자식 -> 오른자식 -> 부모 혹은 왼서브트리 -> 오른서브 트리 -> 부모

#include <iostream>
using namespace std;

void D(int v)
{
    if (v > 31) return; // 4단 까지 있을 때.
    else
    {
        // cout << v << " "; // 전위순회 
        D(v * 2);
        // cout << v << " "; // 중위순회 
        D(v * 2 + 1);
        // cout << v << " "; // 후위순회 
    }
}

int main()
{
    D(1);
}

//---------------------------------------------------------------------------------------------------------------------------
// DFS 완전탐색

// Problem - 부분집합 
// 자연수 N이 주어지면 1부터 N까지의 원소를 갖는 집합의 부분집합을 모두 출력하는 프로그램을 작성하세요. 
// 재귀를 이용한 완전탐색을 하며, 이진트리 전위순회 방식으로 출력한다. 

// 풀이 방식
// ch[i]가 1이면 부분집합에 포함이 되고 0이면 포함이 되지 않는다.  

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int n, ch[11];

void DFS(int L) {
    if (L == n + 1)
    {
        for (int i = 1; i <= n; i++)
        {
            if (ch[i] == 1)
                cout << i;
        }
        cout << endl;
    }
    else
    {
        ch[L] = 1;
        DFS(L + 1);
        ch[L] = 0;
        DFS(L + 1);
    }
}

int main()
{
    cin >> n;
    DFS(1);
}

//---------------------------------------------------------------------------------------------------------------------------
// DFS 완전탐색

// Problem - 합이 같은 부분집합 
// N개의 원소로 구성된 자연수 집합이 주어지면, 이 집합을 두 개의 부분집합으로 나누었을 때, 
// 두 부분집합의 원소의 합이 서로 같은 경우가 존재하면 "YES"를 출력하고, 그렇지 않으면 "NO"를 출력하는 프로그램을 작성하세요.
// 예를 들어, {1, 3, 5, 6, 7, 10}이 입력되면 
// {1, 3, 5, 7} = {6, 10}으로 두 부분집합의 합이 16으로 같은 경우가 존재하는 것을 알 수 있다. 

// 풀이 방식
// 원소를 포함하는 것과 포함하지 않는 것 두 갈래로 나누어 sum이 total/2와 같을 때 flag가 true가 된다. 

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int n, a[11], total = 0;
bool flag = false;

void DFS(int L, int sum)
{
	if (L == n + 1)
	{
		if (sum > (total / 2)) return;
		if (flag == true) return;
		if (sum == total - sum)
			flag = true;
	}
	else 
	{
		DFS(L + 1, sum + a[L]);
		DFS(L + 1, sum);
	}
}

int main()
{
	cin >> n;

	for (int i = 1; i <= n; i++)
	{
		cin >> a[i];
		total += a[i];
	}

	DFS(1, 0);

	if (flag)
		cout << "YES";
	else cout << "NO";
}


